# Generated by Django 5.0 on 2025-04-12 12:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        help_text="Comment about the establishment",
                        max_length=1024,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "db_table": "establishments_comments",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="CommentImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Image of the comment",
                        upload_to="comments/images/",
                        verbose_name="Image",
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="establishments.comment",
                        verbose_name="Comment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment Image",
                "verbose_name_plural": "Comment Images",
                "db_table": "establishments_comments_images",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="CommentLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="establishments.comment",
                        verbose_name="Comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_likes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment Like",
                "verbose_name_plural": "Comment Likes",
                "db_table": "establishments_comments_likes",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Establishment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        db_comment="Unix timestamp ID for the model",
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Unix Timestamp ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the student",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="Address of the establishment",
                        max_length=255,
                        verbose_name="Address",
                    ),
                ),
                (
                    "phone",
                    models.IntegerField(
                        help_text="Phone of the establishment", verbose_name="Phone"
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Contact email of the establishment",
                        max_length=255,
                        verbose_name="Contact Email",
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        help_text="Website of the establishment",
                        max_length=255,
                        verbose_name="Website",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the establishment",
                        max_length=255,
                        verbose_name="Description",
                    ),
                ),
                (
                    "has_ramp",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have a ramp?",
                        verbose_name="Has Ramp",
                    ),
                ),
                (
                    "has_parking",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have parking?",
                        verbose_name="Has Parking",
                    ),
                ),
                (
                    "has_bathroom",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have a bathroom?",
                        verbose_name="Has Bathroom",
                    ),
                ),
                (
                    "has_elevator",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have an elevator?",
                        verbose_name="Has Elevator",
                    ),
                ),
                (
                    "has_tactical_floor",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have a tactical floor?",
                        verbose_name="Has Tactical Floor",
                    ),
                ),
                (
                    "has_signage",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have signage?",
                        verbose_name="Has Signage",
                    ),
                ),
                (
                    "has_braille",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have braille?",
                        verbose_name="Has Braille",
                    ),
                ),
                (
                    "has_audio",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have audio?",
                        verbose_name="Has Audio",
                    ),
                ),
                (
                    "has_guide",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have a guide?",
                        verbose_name="Has Guide",
                    ),
                ),
                (
                    "has_guide_dog",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment allow guide dogs?",
                        verbose_name="Has Guide Dog",
                    ),
                ),
                (
                    "has_sign_language",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have sign language?",
                        verbose_name="Has Sign Language",
                    ),
                ),
                (
                    "has_veterans_discounts",
                    models.BooleanField(
                        default=False,
                        help_text="Does the establishment have soldiers discounts?",
                        verbose_name="Has Soldiers Discounts",
                    ),
                ),
                (
                    "raiting",
                    models.FloatField(
                        default=0.0,
                        help_text="Raiting of the establishment",
                        verbose_name="Raiting",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Is the establishment active?",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Is the establishment deleted?",
                        verbose_name="Is Deleted",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Is the establishment verified?",
                        verbose_name="Is Verified",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Is the establishment public?",
                        verbose_name="Is Public",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="User associated with the progress",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Establishment",
                "verbose_name_plural": "Establishments",
                "db_table": "establishments_establishment",
            },
        ),
        migrations.AddField(
            model_name="comment",
            name="establishment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="establishments.establishment",
                verbose_name="Establishment",
            ),
        ),
        migrations.CreateModel(
            name="EstablishmentPhoto",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        db_comment="Unix timestamp ID for the model",
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Unix Timestamp ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "photo",
                    models.ImageField(
                        help_text="Photo of the establishment",
                        upload_to="establishments/photos/",
                        verbose_name="Photo",
                    ),
                ),
                (
                    "establishment",
                    models.ForeignKey(
                        help_text="Establishment associated with the photo",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="establishments.establishment",
                        verbose_name="Establishment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Establishment Photo",
                "verbose_name_plural": "Establishment Photos",
                "db_table": "establishments_establishment_photo",
            },
        ),
    ]
